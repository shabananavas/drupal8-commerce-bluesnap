<?php

/**
 * @file
 * Provides Bluesnap currency resolver settings.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function commerce_bluesnap_currency_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {

  if ($form_id != "commerce_currency_resolver_admin_conversion") {
    return;
  }

  // Alter commerce_currency_resolver_admin_conversion form and add
  // bluesnap api settings.

  // Get current settings.
  $config = \Drupal::config('commerce_currency_resolver.currency_conversion');

  $form['bluesnap'] = [
    '#type' => 'details',
    '#title' => t('Bluesnap Settings'),
    '#open' => FALSE,
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        ':input[name="source"]' => ['value' => 'exchange_rate_bluesnap'],
      ],
    ],
  ];
  $form['bluesnap']['username'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $config->get('bluesnap')['username'],
  ];
  $form['bluesnap']['password'] = [
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => $config->get('bluesnap')['password'],
  ];
  $form['bluesnap']['mode'] = [
    '#type' => 'radios',
    '#title' => t('Mode'),
    '#options' => [
      'sandbox' => t('Sandbox'),
      'production' => t('Production'),
    ],
    '#default_value' => $config->get('bluesnap')['mode'],
  ];

  // Unset the current validate function as it makes the api key field
  // required for all gateways except exchange_rate_ecb.
  // @to-do Handle this in commerce_currency_resolver module and provide as a patch.
  unset($form['#validate']['0']);
  $form['#validate'][] = 'commerce_bluesnap_currency_resolver_validate';
  array_unshift($form['#submit'], 'commerce_bluesnap_currency_resolver_submit');
}

/**
 * Validate handler for.commerce_currency_resolver_admin_conversion form.
 */
function commerce_bluesnap_currency_resolver_validate(
  &$form,
  FormStateInterface $form_state
) {
  // Make sure that user enters the bluesnap API details, if bluesnap exchange
  // rate is selected.
  if ($form_state->getValue('source') == 'exchange_rate_bluesnap') {
    if (empty($form_state->getValue('bluesnap')['username'])) {
      $form_state->setErrorByName('bluesnap][username', t('Bluesnap username field is required'));
    }
    if (empty($form_state->getValue('bluesnap')['password'])) {
      $form_state->setErrorByName('bluesnap][password', t('Bluesnap password field is required'));
    }
    if (empty($form_state->getValue('bluesnap')['mode'])) {
      $form_state->setErrorByName('bluesnap][mode', t('Bluesnap mode field is required'));
    }
  }
  else {
    if ($form_state->getValue('source') != 'exchange_rate_ecb' && empty($form_state->getValue('api_key'))) {
      $form_state->setErrorByName('api_key', $this->t('API key is required'));
    }
  }
}

/**
 * Submit handler for.commerce_currency_resolver_admin_conversion form.
 */
function commerce_bluesnap_currency_resolver_submit(
  &$form,
  FormStateInterface $form_state
) {
  // Save the bluesnap settings details.
  \Drupal::configFactory()
    ->getEditable('commerce_currency_resolver.currency_conversion')
    ->set('bluesnap', $form_state->getValue('bluesnap'))
    ->save();
}
