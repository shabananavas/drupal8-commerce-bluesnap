<?php

/**
 * @file
 * Provides Commerce integration with the BlueSnap Payment Gateway.
 */

use Drupal\commerce_bluesnap\ConfigHelper;
use Drupal\commerce_bluesnap\FieldService;
use Drupal\commerce_store\Entity\StoreTypeInterface;

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Hooks.
 */

/**
 * Implements hook_help().
 */
function commerce_bluesnap_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.commerce_bluesnap':
      $output = '';
      $output .= '<h2>' . t('About') . '</h2>';
      $output .= '<p>' . t('Provides Drupal Commerce integration with the BlueSnap Payment Platform.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t(
        '<strong>Credit Card Payments Integration</strong>
        - Hosted Payment Fields payment gateway. Serves payment input fields
        from Bluesnapâ€™s domain, minimizing the scope of PCI compliance.
        <br> For more info, see the README.txt file.
        Configure <a href=":configuration_link">here</a>.',
          [
            ':configuration_link' => Url::fromUri(
              'internal:/admin/commerce/config/payment-gateways'
            )->toString(),
          ]
        ) . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_bluesnap_entity_base_field_info(
  EntityTypeInterface $entity_type
) {
  if ($entity_type->id() !== 'commerce_subscription') {
    return;
  }

  $fields['remote_id'] = FieldService::subscriptionRemoteIdFieldDefinition();

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_bluesnap_form_commerce_store_type_form_alter(
  array &$form,
  FormStateInterface $form_state
) {
  $store_type = $form_state->getFormObject()->getEntity();

  $form['bluesnap'] = [
    '#type' => 'details',
    '#title' => t('BlueSnap settings'),
    '#open' => TRUE,
  ];
  $form['bluesnap']['bluesnap_status'] = [
    '#type' => 'checkbox',
    '#title' => t('Make BlueSnap configuration available to stores of this type'),
    '#default_value' => $store_type->getThirdPartySetting(
      'commerce_bluesnap',
      'status',
      FALSE
    ),
  ];

  // Add custom submit handler so that we can save our setting.
  $form['actions']['submit']['#submit'][] = '_commerce_bluesnap_store_type_form_submit';
}

/**
 * Callbacks and private API.
 */

/**
 * Submit handler for the store type add/edit forms.
 */
function _commerce_bluesnap_store_type_form_submit(
  $form,
  FormStateInterface $form_state
) {
  $store_type = $form_state->getFormObject()->getEntity();

  $status = $form_state->getValue('bluesnap_status');

  // Install the BlueSnap configuration field if configuration is enabled for
  // this store type.
  // TODO: Remove field when disabling and if there are no data already in the
  // field.
  if ($status) {
    _commerce_bluesnap_store_type_add_config_field($store_type);
  }

  // Save our third party settings for the order type.
  $store_type->setThirdPartySetting(
    'commerce_bluesnap',
    'status',
    $status
  );
  $store_type->save();
}

/**
 * Creates the BlueSnap configuration field for the given store type.
 *
 * TODO: Consider moving this to a service; but let's leave it here for now
 * until we see where else we may be storing configuration so that we determine
 * where's the best way to architect such service.
 */
function _commerce_bluesnap_store_type_add_config_field(
  StoreTypeInterface $store_type
) {
  $field_definitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions('commerce_store', $store_type->id());

  if (!isset($field_definitions['bluesnap_config'])) {
    $field_definition = ConfigHelper::fieldDefinition('BlueSnap settings')
      ->setTargetEntityTypeId('commerce_store')
      ->setTargetBundle($store_type->id())
      ->setName('bluesnap_config')
      ->setDisplayOptions('form', [
        'type' => 'bluesnap_config_store',
        'region' => 'hidden',
      ]);
    $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
    $configurable_field_manager->createField($field_definition);
  }
}
