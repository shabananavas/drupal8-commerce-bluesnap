<?php

/**
 * @file
 * Provides Commerce integration with the BlueSnap Payment Gateway.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function commerce_bluesnap_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.commerce_bluesnap':
      $output = '';
      $output .= '<h2>' . t('About') . '</h2>';
      $output .= '<p>' . t('Provides Drupal Commerce integration with the BlueSnap Payment Platform.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t(
        '<strong>Credit Card Payments Integration</strong>
        - Hosted Payment Fields payment gateway. Serves payment input fields
        from Bluesnapâ€™s domain, minimizing the scope of PCI compliance.
        <br> For more info, see the README.txt file.
        Configure <a href=":configuration_link">here</a>.',
          [
            ':configuration_link' => Url::fromUri(
              'internal:/admin/commerce/config/payment-gateways'
            )->toString(),
          ]
        ) . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_bluesnap_entity_base_field_info(
    EntityTypeInterface $entity_type
) {
  if ($entity_type->id() !== 'commerce_store'
    && $entity_type->id() !== 'commerce_product_variation') {
    return;
  }

  // Add bluesnap data level service settings field.
  $fields['bluesnap_settings'] = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Bluesnap settings'))
    ->setDisplayOptions('view', [
      'region' => 'hidden',
    ])
    ->setDisplayOptions('form', [
      'region' => 'hidden',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function commerce_bluesnap_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  // Early return if we are not dealing with a entity form.
  $form_object = $form_state->getFormObject();
  if (!($form_object instanceof EntityFormInterface)) {
    return;
  }

  // We are currently interested only in product variation
  // and store entity types.
  $entity_type = $form_object->getEntity()->getEntityTypeId();
  if ($entity_type != 'commerce_product_variation' &&
    $entity_type != 'commerce_store') {
    return;
  }

  // Add a form wrapper element for bluesnap settings.
  $form['bluesnap'] = [
    '#type' => 'details',
    '#title' => t('Bluesnap settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];

  // Build the BlueSnap data level settings form fields.
  $enhanced_data_config = \Drupal::service('commerce_bluesnap.enhanced_data_config');
  $form['bluesnap']['data_level'] = $enhanced_data_config->buildSettingsForm($form_state);

  // Execute our submit handler first.
  array_unshift(
    $form['actions']['submit']['#submit'],
    'commerce_bluesnap_form_commerce_bluesnap_settings_form_submit'
  );

  // We need kount settings only in store entity
  if ($entity_type === 'commerce_store') {
    // Build the BlueSnap Kount settings form fields.
    $kount_account = \Drupal::service('commerce_bluesnap.kount_account');
    $form['bluesnap']['kount'] = $kount_account->buildSettingsForm($form_state);
  }
}

/**
 * Form submit for the blueSnap settings form.
 */
function commerce_bluesnap_form_commerce_bluesnap_settings_form_submit(
    $form,
    FormStateInterface $form_state
) {
  $bluesnap = $form_state->getValue('bluesnap');

  // Save blueSnap settings as json encoded string.
  $store = $form_state->getFormObject()->getEntity();
  $store->set('bluesnap_settings', json_encode($bluesnap));
}
